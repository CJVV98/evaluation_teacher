pip install mongoengine
pip3 install django-bootstrap-v5

python -m spacy download es_core_news_sm
pip install nltk
pip install unidecode
pip install spacy
pip install tabula-py
pip install pandas==2.2
pip install scikit-learn

nltk.download('punkt')
nltk.download('stopwords')



from mongoengine import Document, StringField, IntField, EmbeddedDocument, ListField, EmbeddedDocumentField, FloatField

class Comment(Document):
    comment =StringField(required=True, unique=False)
    comment_base =StringField(required=True, unique=False)
    emotion=StringField(required=True, unique=False)
    ciclo=IntField(required=True, unique=False)


    def get_emotion_count():
        pipeline_get_emotion_count = [
            {
                '$group': {
                    '_id': '$emotion', 
                    'cantidad': {
                        '$sum': 1
                    }
                }
            }
        ]
        return pipeline_get_emotion_count

class Calification(Document):
    cod =IntField(required=True, unique=False)
    criterio =StringField(required=True, unique=False)
    ciclo=IntField(required=True, unique=False)
    total_encuestas =IntField(required=False, unique=False)
    total_clases_encuestadas =IntField(required=False, unique=False)
    num_estudiantes_inscritos =IntField(required=False, unique=False)
    total_enc_respondidas =IntField(required=False, unique=False)
    prom_criterio =FloatField(required=False, unique=False)
    porc_consolidado_crit_1 =FloatField(required=False, unique=False)
    porc_consolidado_crit_2 =FloatField(required=False, unique=False)
    porc_consolidado_crit_3 =FloatField(required=False, unique=False)
    porc_consolidado_crit_4 =FloatField(required=False, unique=False)
    porc_consolidado_crit_5 =FloatField(required=False, unique=False)
    porc_consolidado_crit_6 =FloatField(required=False, unique=False)
    porc_consolidado_crit_n_s =FloatField(required=False, unique=False)  
    cant_consolidado_crit_1= FloatField(required=False, unique=False) 
    cant_consolidado_crit_2= FloatField(required=False, unique=False)
    cant_consolidado_crit_3= FloatField(required=False, unique=False) 
    cant_consolidado_crit_4= FloatField(required=False, unique=False) 
    cant_consolidado_crit_5= FloatField(required=False, unique=False)
    cant_consolidado_crit_6= FloatField(required=False, unique=False) 
    cant_consolidado_crit_n_s= FloatField(required=False, unique=False) 

    def get_criteria():
        pipeline=[
            {
                '$group': {
                    '_id': '$criterio'
                }
            },
             {
                '$project': {
                    '_id': 0, 
                    'id': '$_id', 
                    'description': '$_id'
                }
            }
        ]
        return pipeline

    def get_calification_group():
        pipeline_get_calification_count = [
            {
                '$match': {
                    'cant_consolidado_crit_1': {'$type': 'double', '$exists': True, '$ne': None,'$ne': float('nan')}, 
                    'cant_consolidado_crit_2': {'$type': 'double', '$exists': True, '$ne': None,'$ne': float('nan')}, 
                    'cant_consolidado_crit_3': {'$type': 'double', '$exists': True, '$ne': None,'$ne': float('nan')}, 
                    'cant_consolidado_crit_4': {'$type': 'double', '$exists': True, '$ne': None,'$ne': float('nan')}, 
                    'cant_consolidado_crit_5': {'$type': 'double', '$exists': True, '$ne': None,'$ne': float('nan')}, 
                    'cant_consolidado_crit_6': {'$type': 'double', '$exists': True, '$ne': None,'$ne': float('nan')}, 
                    'cant_consolidado_crit_n_s': {'$type': 'double', '$exists': True, '$ne': None,'$ne': float('nan')}, 
                    'ciclo': 2330
                }
            }, {
                '$group': {
                    '_id': '$criterio', 
                    'sum_criterio_1': { '$sum': '$cant_consolidado_crit_1' }, 
                    'sum_criterio_2': { '$sum': '$cant_consolidado_crit_2'}, 
                    'sum_criterio_3': { '$sum': '$cant_consolidado_crit_3' }, 
                    'sum_criterio_4': { '$sum': '$cant_consolidado_crit_4'}, 
                    'sum_criterio_5': { '$sum': '$cant_consolidado_crit_5' }, 
                    'sum_criterio_6': { '$sum': '$cant_consolidado_crit_6' }, 
                    'sum_criterio_7': { '$sum': '$cant_consolidado_crit_n_s'}
                }
            }
        ]
        return pipeline_get_calification_count
        

class Evaluation(Document):
    id_course =IntField(required=True, unique=False)
    id_teacher =IntField(required=True, unique=False)
    ciclo=IntField(required=True, unique=False)
    num_clase =IntField(required=True, unique=False)
    description =StringField(required=True, unique=False)
    califications = ListField()
    comments= ListField()

    def get_top_emotion(emotion):
        pipeline_top_emotions_class=[
                {
                    '$lookup': {'from': 'comment', 'localField': 'comments._ref.$id',  'foreignField': '_id',  'as': 'comments_student' }
                }, {
                    '$unwind': '$comments_student'
                }, {
                    '$addFields': { 'emotion': '$comments_student.emotion',  'id_course': '$id_course','num_clase': '$num_clase',  'name_clase': '$description'
                    }
                }, {
                    '$group': {
                        '_id': {
                            'name_class': '$name_clase','emotion': '$emotion', 'id_course': '$id_course','num_clase': '$num_clase'
                        }, 
                        'count': {
                            '$sum': 1
                        }
                    }
                }, {
                    '$match': {
                        '_id.emotion':emotion
                    }
                }, {
                    '$sort': {
                        'count': -1
                    }
                }, {
                    '$limit': 5
                }
        ]
        return pipeline_top_emotions_class

    def get_courses():
        pipeline_teachers=[
            {
                '$group': {
                    '_id': {
                        'id': '$id_course', 
                        'description': '$description'
                    }
                }
            }, {
                '$project': {
                    '_id': 0, 
                    'id': '$_id.id', 
                    'description': '$_id.description'
                }
            }
        ]
        return pipeline_teachers
    
    def get_emotions_by_teacher(id,name):
        pipeline_emotions=[
            {
                '$match': {
                    'id_teacher': int(id)
                }
            }, {
                '$lookup': {
                    'from': 'comment', 
                    'localField': 'comments._ref.$id', 
                    'foreignField': '_id', 
                    'as': 'comments_student'
                }
            }, {
                '$unwind': '$comments_student'
            }, {
                '$addFields': {
                    'emotion': '$comments_student.emotion', 
                    'id_course': '$id_course', 
                    'num_clase': '$num_clase', 
                    'name_clase': '$description'
                }
            }, {
                '$group': {
                    '_id': {
                        'name_class': '$name_clase', 
                        'emotion': '$emotion', 
                        'id_course': '$id_course', 
                        'num_clase': '$num_clase'
                    }, 
                    'cantidad': {
                        '$sum': 1
                    }
                }
            }, {
                '$project': {
                    '_id': 0, 
                    'id_teacher': name, 
                    'class_val': 'Emociones', 
                    'name_class': '$_id.name_class', 
                    'value_class': '$_id.emotion', 
                    'value_total': '$cantidad'
                }
            }
            ]
        return pipeline_emotions
    
    def get_group_emotions_by_teacher(id,name):
        pipeline_emotions=[
            {
                '$match': {
                    'id_teacher': int(id)
                }
            }, {
                '$lookup': {
                    'from': 'comment', 
                    'localField': 'comments._ref.$id', 
                    'foreignField': '_id', 
                    'as': 'comments_student'
                }
            }, {
                '$unwind': '$comments_student'
            }, {
                '$addFields': {
                    'emotion': '$comments_student.emotion'
                }
            }, {
                '$group': {
                    '_id': {
                        'emotion': '$emotion'
                    }, 
                    'cantidad': {
                        '$sum': 1
                    }
                }
            }, {
                '$project': {
                    '_id': 0, 
                    'value_class': '$_id.emotion', 
                    'value_total': '$cantidad'
                }
            }
            ]
        return pipeline_emotions
    
    def get_criterias_by_teacher(id,name):
        pipeline_calification= [
            {
                '$match': {
                    'id_teacher': int(id)
                }
            }, {
                '$lookup': {
                    'from': 'calification', 
                    'localField': 'califications._ref.$id', 
                    'foreignField': '_id', 
                    'as': 'califications_teacher'
                }
            }, {
                '$unwind': '$califications_teacher'
            }, {
                '$addFields': {
                    'prom_criteria': '$califications_teacher.prom_criterio', 
                    'criteria': '$califications_teacher.criterio', 
                    'id_course': '$id_course', 
                    'num_clase': '$num_clase', 
                    'name_clase': '$description'
                }
            }, {
                '$group': {
                    '_id': {
                        'name_class': '$name_clase', 
                        'criteria': '$criteria', 
                        'id_course': '$id_course'
                    }, 
                    'prom_criteria': {
                        '$avg': '$prom_criteria'
                    }
                }
            }, {
                '$project': {
                    '_id': 0, 
                    'id_teacher': name, 
                    'class_val': 'Criterios cuantitativos', 
                    'name_class': '$_id.name_class', 
                    'value_class': '$_id.criteria', 
                    'value_total': '$prom_criteria'
                }
            }
        ]
        return pipeline_calification
    

    def get_group_criterias_by_teacher(id,name):
        pipeline_calification= [
            {
                '$match': {
                    'id_teacher': int(id)
                }
            }, {
                '$lookup': {
                    'from': 'calification', 
                    'localField': 'califications._ref.$id', 
                    'foreignField': '_id', 
                    'as': 'califications_teacher'
                }
            }, {
                '$unwind': '$califications_teacher'
            }, {
                '$addFields': {
                    'prom_criteria': '$califications_teacher.prom_criterio', 
                    'criteria': '$califications_teacher.criterio'
                }
            }, {
                '$group': {
                    '_id': {
                        'criteria': '$criteria'
                    }, 
                    'prom_criteria': {
                        '$avg': '$prom_criteria'
                    }
                }
            }, {
                '$project': {
                    '_id': 0, 
                    'value_class': '$_id.criteria', 
                    'value_total': '$prom_criteria'
                }
            }
        ]
        return pipeline_calification

class Teacher(Document):
    id_teacher =IntField(required=True, unique=True)
    name =StringField(required=True, unique=True)
    evaluations=  ListField()


    def get_courses_by_teacher(id):
        pipeline=[
            {
                '$lookup': {
                    'from': 'evaluation', 
                    'localField': 'evaluations._ref.$id', 
                    'foreignField': '_id', 
                    'as': 'evaluations_group'
                }
            }, {
                '$unwind': '$evaluations_group'
            }, {
                '$addFields': {
                    'name_course': '$evaluations_group.description', 
                    'id_teacher': '$id_teacher', 
                    'num_clase': '$evaluations_group.num_clase', 
                    'id_course': '$evaluations_group.id_course', 
                    'name_teacher': '$name'
                }
            }, {
                '$group': {
                    '_id': { 'id_course': '$id_course',  'id_teacher': '$id_teacher',  'num_class': '$num_clase',  'name_course': '$evaluations_group.description'}, 
                    'count': {
                        '$sum': 1
                    }
                }
            }, {
                '$match': {
                    '_id.id_teacher': id
                }
            }, {
                '$project': {'_id': 0, 'id': '$_id.id_course', 'description': '$_id.name_course', 'num_course': '$_id.num_class'}
            }
        ]      
        return pipeline

